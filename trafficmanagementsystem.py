# -*- coding: utf-8 -*-
"""TrafficManagementSystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cTMW2zh5AT4PLJz8QTm1a-uL-r3BPSf9
"""

import os
import zipfile
import random
import shutil
import tensorflow as tf

from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from shutil import copyfile
from os import getcwd
from os import listdir
import cv2
from tensorflow.keras.layers import Conv2D, Input, ZeroPadding2D, BatchNormalization, Activation, MaxPooling2D, Flatten, Dense
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.utils import shuffle
import imutils
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image  as mpimg

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive/')

from zipfile import ZipFile

file_name = "/content/drive/MyDrive/Traffic-management-system-finally.zip"

with ZipFile(file_name, 'r') as zip:
  zip.extractall()

"""

```
# This is formatted as code
```

"""

print(len(os.listdir('/content/Traffic-management-system/Traffic-management-system/Vehicles')))

print(len(os.listdir('/content/Traffic-management-system/Traffic-management-system/Pedestrains')))

try:
    os.mkdir('/content/Traffic-management')

    os.mkdir('/content/Traffic-management/training')
    os.mkdir('/content/Traffic-management/testing')

    os.mkdir('/content/Traffic-management/training/Vehicles')
    os.mkdir('/content/Traffic-management/training/Pedestrains')


    os.mkdir('/content/Traffic-management/testing/Vehicles')
    os.mkdir('/content/Traffic-management/testing/Pedestrains')


except OSError:
    pass

import random
from shutil import copyfile

def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):

    files = []
    for filename in os.listdir(SOURCE):
        file = SOURCE + filename
        if os.path.getsize(file) > 0:
            files.append(filename)
        else:
            print(filename + " is zero length, so ignoring.")

    training_length = int(len(files) * SPLIT_SIZE)
    testing_length = int(len(files) - training_length)

    shuffled_set = random.sample(files, len(files))
    training_set = shuffled_set[0:training_length]
    testing_set = shuffled_set[training_length:]

    for filename in training_set:
        this_file = SOURCE + filename
        destination = TRAINING + filename
        copyfile(this_file, destination)

    for filename in testing_set:
        this_file = SOURCE + filename
        destination = TESTING + filename
        copyfile(this_file, destination)

VEHICLES_SOURCE_DIR = "/content/Traffic-management-system/Traffic-management-system/Vehicles/"
TRAINING_VEHICLES_DIR = "/content/Traffic-management/training/Vehicles/"
TESTING_VEHICLES_DIR = "/content/Traffic-management/testing/Vehicles/"

PEDESTRAINS_SOURCE_DIR = "/content/Traffic-management-system/Traffic-management-system/Pedestrains/"
TRAINING_PEDESTRAINS_DIR = "/content/Traffic-management/training/Pedestrains/"
TESTING_PEDESTRAINS_DIR = "/content/Traffic-management/testing/Pedestrains/"

split_size = 0.8

split_data(VEHICLES_SOURCE_DIR,TRAINING_VEHICLES_DIR,TESTING_VEHICLES_DIR, split_size)

split_data(PEDESTRAINS_SOURCE_DIR, TRAINING_PEDESTRAINS_DIR ,TESTING_PEDESTRAINS_DIR , split_size)

TRAINING_DIR = "/content/Traffic-management/training"

train_datagen = ImageDataGenerator(rescale=1./255,
      rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')


#  0 - 255 /255 ~ 1 Red to Violet 

train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                    batch_size=100,
                                                    class_mode='binary',
                                                    target_size=(150, 150))
VALIDATION_DIR = "/content/Traffic-management/testing"

validation_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                              batch_size=100,
                                                              class_mode='binary',
                                                              target_size=(150, 150))

model = tf.keras.models.Sequential([
                                    
    tf.keras.layers.Conv2D(100, (3,3), activation='relu', input_shape=(150, 150, 3)), 
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(100, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 

    tf.keras.layers.Dense(50, activation='relu'),

    tf.keras.layers.Dense(2, activation='softmax')

])

print(model.summary())

opt=tf.keras.optimizers.Adam(learning_rate=0.001)

model.compile(optimizer=opt,
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])


history = model.fit(
            train_generator,
            validation_data=validation_generator,
            epochs=30,
            verbose=1)

#1 0.1 = 0.9 ,  1 0.1 = 0,1

model.evaluate(validation_generator)

icd = train_generator.class_indices

icd

icd = list(icd)

from tensorflow.keras.utils import img_to_array, load_img
# from  import img_to_array
dic=train_generator.class_indices
#icd={k:v for v,k in dic.items()}

def output(location):

    img=load_img(location,target_size=(150,150,3))
    img=img_to_array(img)

    img=img/255
    
    img=np.expand_dims(img,[0])
    
    answer=model.predict(img)
    ans=answer.tolist()
    ans=list(ans)
    for i in ans:
      temp=i
    ans=temp
    probability=max(ans)
    classes=icd[ans.index(probability)]
    print (classes, 'With probability',probability)

img="/content/Traffic-management/testing/Pedestrains/p22.jpg"
s=load_img(img,target_size=(150,150,3))
s

output(img)

model.save('TrafficManagement.h5')

model.save_weights("model1.h5")

tf.__version__

